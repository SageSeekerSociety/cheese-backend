import { GroupMembership } from "../groups/groups"
import { Question, QuestionFollowerRelation, QuestionQueryLog, QuestionSearchLog, QuestionTopicRelation } from "../questions/questions"
import { Topic, TopicSearchLog } from "../topics/topics"
import { Avatar } from "../avatars/avatars"
import { Answer, AnswerDeleteLog, AnswerFavoritedByUser, AnswerQueryLog, AnswerUpdateLog } from "../answer/answer"
import { Attitude } from "../attitude/attitude"
import { Comment, CommentDeleteLog, CommentQueryLog } from "../comments/comment"
import { AttitudeLog } from "../attitude/attitude"
import { QuestionInvitationRelation } from "../questions/questions.invitation"
import { Material } from "../materials/materials"
import { MaterialBundle } from "../materialbundles/materialbundles"

model User {
  id                                                                 Int                          @id(map: "PK_cace4a159ff9f2512dd42373760") @default(autoincrement())
  username                                                           String                       @unique(map: "IDX_78a916df40e02a9deb1c4b75ed") @db.VarChar
  hashedPassword                                                     String                       @map("hashed_password") @db.VarChar
  email                                                              String                       @unique(map: "IDX_e12875dfb3b1d92d7d7c5377e2") @db.VarChar
  createdAt                                                          DateTime                     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                                          DateTime                     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt                                                          DateTime?                    @map("deleted_at") @db.Timestamptz(6)
  answer                                                             Answer[]
  answerDeleteLog                                                    AnswerDeleteLog[]
  answerFavoritedByUser                                              AnswerFavoritedByUser[]
  answerQueryLog                                                     AnswerQueryLog[]
  answerUpdateLog                                                    AnswerUpdateLog[]
  comment                                                            Comment[]
  commentDeleteLog                                                   CommentDeleteLog[]
  commentQueryLog                                                    CommentQueryLog[]
  groupMembership                                                    GroupMembership[]
  question                                                           Question[]
  questionFollowerRelation                                           QuestionFollowerRelation[]
  questionQueryLog                                                   QuestionQueryLog[]
  questionSearchLog                                                  QuestionSearchLog[]
  questionTopicRelation                                              QuestionTopicRelation[]
  topic                                                              Topic[]
  topicSearchLog                                                     TopicSearchLog[]
  userFollowingRelationshipUserFollowingRelationshipFollowerIdTouser UserFollowingRelationship[]  @relation("user_following_relationship_followerIdTouser")
  userFollowingRelationshipUserFollowingRelationshipFolloweeIdTouser UserFollowingRelationship[]  @relation("user_following_relationship_followeeIdTouser")
  userLoginLog                                                       UserLoginLog[]
  userProfile                                                        UserProfile?
  userProfileQueryLogUserProfileQueryLogViewerIdTouser               UserProfileQueryLog[]        @relation("user_profile_query_log_viewerIdTouser")
  userProfileQueryLogUserProfileQueryLogVieweeIdTouser               UserProfileQueryLog[]        @relation("user_profile_query_log_vieweeIdTouser")
  attitude                                                           Attitude[]
  attitudeLog                                                        AttitudeLog[]
  questionInvitationRelation                                         QuestionInvitationRelation[]
  Material                                                           Material[]
  MaterialBundle                                                     MaterialBundle[]
  passkeys                                                           Passkey[]
  totpSecret                                                         String?         @db.VarChar(64)  @map("totp_secret")  
  totpEnabled                                                        Boolean         @default(false)   @map("totp_enabled") 
  totpAlwaysRequired                                                Boolean         @default(false)   @map("totp_always_required")
  backupCodes                                                        UserBackupCode[]

  @@map("user")
}

model UserFollowingRelationship {
  id                                            Int       @id(map: "PK_3b0199015f8814633fc710ff09d") @default(autoincrement())
  followeeId                                    Int       @map("followee_id")
  followerId                                    Int       @map("follower_id")
  createdAt                                     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt                                     DateTime? @map("deleted_at") @db.Timestamptz(6)
  userUserFollowingRelationshipFollowerIdTouser User      @relation("user_following_relationship_followerIdTouser", fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_868df0c2c3a138ee54d2a515bce")
  userUserFollowingRelationshipFolloweeIdTouser User      @relation("user_following_relationship_followeeIdTouser", fields: [followeeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_c78831eeee179237b1482d0c6fb")

  @@index([followerId], map: "IDX_868df0c2c3a138ee54d2a515bc")
  @@index([followeeId], map: "IDX_c78831eeee179237b1482d0c6f")
  @@map("user_following_relationship")
}

model UserLoginLog {
  id        Int      @id(map: "PK_f8db79b1af1f385db4f45a2222e") @default(autoincrement())
  userId    Int      @map("user_id")
  ip        String   @db.VarChar
  userAgent String?  @map("user_agent") @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_66c592c7f7f20d1214aba2d0046")

  @@index([userId], map: "IDX_66c592c7f7f20d1214aba2d004")
  @@map("user_login_log")
}

model UserProfile {
  id        Int       @id(map: "PK_f44d0cd18cfd80b0fed7806c3b7") @default(autoincrement())
  userId    Int       @unique(map: "IDX_51cb79b5555effaf7d69ba1cff") @map("user_id")
  nickname  String    @db.VarChar
  avatarId  Int       @map("avatar_id")
  intro     String    @db.VarChar
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_profile_user_id")
  avatar    Avatar    @relation(fields: [avatarId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_profile_avatar_id")

  @@map("user_profile")
}

model UserProfileQueryLog {
  id                                    Int      @id(map: "PK_9aeff7c959703fad866e9ad581a") @default(autoincrement())
  viewerId                              Int?     @map("viewer_id")
  vieweeId                              Int      @map("viewee_id")
  ip                                    String   @db.VarChar
  userAgent                             String?  @map("user_agent") @db.VarChar
  createdAt                             DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  userUserProfileQueryLogViewerIdTouser User?    @relation("user_profile_query_log_viewerIdTouser", fields: [viewerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_1261db28434fde159acda6094bc")
  userUserProfileQueryLogVieweeIdTouser User     @relation("user_profile_query_log_vieweeIdTouser", fields: [vieweeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ff592e4403b328be0de4f2b3973")

  @@index([viewerId], map: "IDX_1261db28434fde159acda6094b")
  @@index([vieweeId], map: "IDX_ff592e4403b328be0de4f2b397")
  @@map("user_profile_query_log")
}

enum UserRegisterLogType {
  RequestSuccess
  RequestFailDueToAlreadyRegistered
  RequestFailDueToInvalidOrNotSupportedEmail
  RequestFailDurToSecurity
  RequestFailDueToSendEmailFailure
  Success
  FailDueToUserExistence
  FailDueToWrongCodeOrExpired
}

model UserRegisterLog {
  id        Int                 @id(map: "PK_3596a6f74bd2a80be930f6d1e39") @default(autoincrement())
  email     String              @db.VarChar
  type      UserRegisterLogType
  ip        String              @db.VarChar
  userAgent String?             @map("user_agent") @db.VarChar
  createdAt DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([email], map: "IDX_3af79f07534d9f1c945cd4c702")
  @@map("user_register_log")
}

model UserRegisterRequest {
  id        Int      @id(map: "PK_cdf2d880551e43d9362ddd37ae0") @default(autoincrement())
  email     String   @db.VarChar
  code      String   @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([email], map: "IDX_c1d0ecc369d7a6a3d7e876c589")
  @@map("user_register_request")
}

enum UserResetPasswordLogType {
  RequestSuccess
  RequestFailDueToNoneExistentEmail
  RequestFailDueToSecurity
  Success
  FailDueToInvalidToken
  FailDueToExpiredRequest
  FailDueToNoUser
}

model UserResetPasswordLog {
  id        Int                      @id(map: "PK_3ee4f25e7f4f1d5a9bd9817b62b") @default(autoincrement())
  userId    Int?                     @map("user_id")
  type      UserResetPasswordLogType
  ip        String                   @db.VarChar
  userAgent String?                  @map("user_agent") @db.VarChar
  createdAt DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("user_reset_password_log")
}

model UserBackupCode {
  id         Int       @id @default(autoincrement())
  userId     Int       @map("user_id")
  codeHash   String    @map("code_hash") @db.VarChar(128)  // 加盐哈希存储
  used       Boolean   @default(false)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  user       User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "IDX_user_backup_code_user_id")
  @@map("user_backup_code")
}

model Passkey {
  id           Int      @id(map: "PK_passkey") @default(autoincrement())
  credentialId String   // 凭证ID
  publicKey    Bytes    // 存储公钥（二进制数据）
  counter      Int      // 验证计数器
  deviceType   String   // 'singleDevice' 或 'multiDevice'
  backedUp     Boolean  // 是否已备份
  transports   String?  // 可选，存储传输方式（JSON 数组字符串）
  userId       Int      // 关联用户ID
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("passkey")
  @@index([userId], map: "IDX_passkey_user_id")
}
