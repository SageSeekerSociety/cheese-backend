import { PipeTransform } from '@nestjs/common';

interface SnakeCaseToCamelCasePipeParameters {
  prefixIgnorePattern?: string;
  suffixIgnorePattern?: string;
}

export class SnakeCaseToCamelCasePipe
  implements PipeTransform<string | undefined, string>
{
  constructor(private readonly arg: SnakeCaseToCamelCasePipeParameters = {}) {}
  transform(value: string | undefined): string {
    // Generated by Gtihub Copilot
    // Modified by nictheboy
    let prefix = '';
    let suffix = '';
    if (this.arg.prefixIgnorePattern) {
      prefix =
        value?.match(new RegExp(`^${this.arg.prefixIgnorePattern}`))?.[0] ?? '';
      value =
        value?.replace(new RegExp(`^${this.arg.prefixIgnorePattern}`), '') ??
        '';
    }
    if (this.arg.suffixIgnorePattern) {
      suffix =
        value?.match(new RegExp(`${this.arg.suffixIgnorePattern}$`))?.[0] ?? '';
      value =
        value?.replace(new RegExp(`${this.arg.suffixIgnorePattern}$`), '') ??
        '';
    }
    return (
      prefix +
      (value?.replace(/([-_][a-z])/g, (group) =>
        group.toUpperCase().replace('-', '').replace('_', ''),
      ) ?? '') +
      suffix
    );
  }
}
