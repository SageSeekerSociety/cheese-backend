//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

import { GroupQuestionRelationship } from "../groups/groups.legacy"
import { User } from "../users/users"
import { Topic } from "../topics/topics"
import { Answer } from "../answer/answer"
import { QuestionElasticsearchRelation } from "questions.es"
import { QuestionInvitationRelation } from "questions.invitation"

model Question {
  id                            Int                            @id(map: "PK_21e5786aa0ea704ae185a79b2d5") @default(autoincrement())
  createdById                   Int                            @map("created_by_id")
  title                         String
  content                       String
  type                          Int
  groupId                       Int?                           @map("group_id")
  createdAt                     DateTime                       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                     DateTime                       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt                     DateTime?                      @map("deleted_at") @db.Timestamptz(6)
  answer                        Answer[]
  groupQuestionRelationship     GroupQuestionRelationship?
  user                          User                           @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_187915d8eaa010cde8b053b35d5")
  bounty                        Int                            @default(0)
  bountyStartAt                 DateTime?                      @map("bounty_start_at") @db.Timestamptz(6)
  acceptedAnswer                Answer?                        @relation("AcceptedAnswer", fields: [acceptedAnswerId], references: [id])
  acceptedAnswerId              Int?                           @unique() @map("accepted_answer_id")
  questionFollowerRelation      QuestionFollowerRelation[]
  questionQueryLog              QuestionQueryLog[]
  questionTopicRelation         QuestionTopicRelation[]
  questionInvitationRelation    QuestionInvitationRelation[]
  questionElasticsearchRelation QuestionElasticsearchRelation?

  @@index([createdById], map: "IDX_187915d8eaa010cde8b053b35d")
  @@index([title, content], map: "IDX_8b24620899a8556c3f22f52145")
  @@index([groupId], map: "IDX_ac7c68d428ab7ffd2f4752eeaa")
  @@map("question")
}

model QuestionFollowerRelation {
  id         Int       @id(map: "PK_5f5ce2e314f975612a13d601362") @default(autoincrement())
  questionId Int       @map("question_id")
  followerId Int       @map("follower_id")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  user       User      @relation(fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_21a30245c4a32d5ac67da809010")
  question   Question  @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_6544f7f7579bf88e3c62f995f8a")

  @@index([followerId], map: "IDX_21a30245c4a32d5ac67da80901")
  @@index([questionId], map: "IDX_6544f7f7579bf88e3c62f995f8")
  @@map("question_follower_relation")
}

model QuestionQueryLog {
  id         Int      @id(map: "PK_2876061262a774e4aba4daaaae4") @default(autoincrement())
  viewerId   Int?     @map("viewer_id")
  questionId Int      @map("question_id")
  ip         String   @db.VarChar
  userAgent  String?  @map("user_agent") @db.VarChar
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user       User?    @relation(fields: [viewerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_8ce4bcc67caf0406e6f20923d4d")
  question   Question @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_a0ee1672e103ed0a0266f217a3f")

  @@index([viewerId], map: "IDX_8ce4bcc67caf0406e6f20923d4")
  @@index([questionId], map: "IDX_a0ee1672e103ed0a0266f217a3")
  @@map("question_query_log")
}

model QuestionSearchLog {
  id              Int      @id(map: "PK_6f41b41474cf92c67a7da97384c") @default(autoincrement())
  keywords        String   @db.VarChar
  firstQuestionId Int?     @map("first_question_id")
  pageSize        Int      @map("page_size")
  result          String   @db.VarChar
  duration        Float
  searcherId      Int?     @map("searcher_id")
  ip              String   @db.VarChar
  userAgent       String?  @map("user_agent") @db.VarChar
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user            User?    @relation(fields: [searcherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_13c7e9fd7403cc5a87ab6524bc4")

  @@index([searcherId], map: "IDX_13c7e9fd7403cc5a87ab6524bc")
  @@index([keywords], map: "IDX_2fbe3aa9f62233381aefeafa00")
  @@map("question_search_log")
}

model QuestionTopicRelation {
  id          Int       @id(map: "PK_c50ec8a9ac6c3007f0861e4a383") @default(autoincrement())
  questionId  Int       @map("question_id")
  topicId     Int       @map("topic_id")
  createdById Int       @map("created_by_id")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)
  user        User      @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_d439ea68a02c1e7ea9863fc3df1")
  topic       Topic     @relation(fields: [topicId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_dd4b9a1b83559fa38a3a50463fd")
  question    Question  @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_fab99c5e4fc380d9b7f9abbbb02")

  @@index([topicId], map: "IDX_dd4b9a1b83559fa38a3a50463f")
  @@index([questionId], map: "IDX_fab99c5e4fc380d9b7f9abbbb0")
  @@map("question_topic_relation")
}
