//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// app.prisma
//

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

//
// answer.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

model Answer {
  id                    Int                     @id(map: "PK_9232db17b63fb1e94f97e5c224f") @default(autoincrement())
  createdById           Int                     @map("created_by_id")
  questionId            Int                     @map("question_id")
  groupId               Int?                    @map("group_id")
  content               String
  createdAt             DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime                @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt             DateTime?               @map("deleted_at") @db.Timestamptz(6)
  group                 Group?                  @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_1887685ce6667b435b01c646a2c")
  question              Question                @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_a4013f10cd6924793fbd5f0d637")
  user                  User                    @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_f636f6e852686173ea947f29045")
  answerDeleteLog       AnswerDeleteLog[]
  answerFavoritedByUser AnswerFavoritedByUser[]
  answerQueryLog        AnswerQueryLog[]
  answerUpdateLog       AnswerUpdateLog[]
  answerUserAttitude    AnswerUserAttitude[]
  acceptedByQuestion    Question?               @relation("AcceptedAnswer")

  @@index([groupId], map: "IDX_1887685ce6667b435b01c646a2")
  @@index([questionId], map: "IDX_a4013f10cd6924793fbd5f0d63")
  @@index([createdById], map: "IDX_f636f6e852686173ea947f2904")
  @@map("answer")
}

model AnswerDeleteLog {
  id        Int      @id(map: "PK_f1696d27f69ec9c6133a12aadcf") @default(autoincrement())
  deleterId Int?     @map("deleter_id")
  answerId  Int      @map("answer_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_910393b814aac627593588c17fd")
  user      User?    @relation(fields: [deleterId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_c2d0251df4669e17a57d6dbc06f")

  @@index([answerId], map: "IDX_910393b814aac627593588c17f")
  @@index([deleterId], map: "IDX_c2d0251df4669e17a57d6dbc06")
  @@map("answer_delete_log")
}

model AnswerFavoritedByUser {
  answerId Int    @map("answer_id")
  userId   Int    @map("user_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_9556368d270d73579a68db7e1bf")
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade, map: "FK_c27a91d761c26ad612a0a356971")

  @@id([answerId, userId], map: "PK_5a857fe93c44fdb538ec5aa4771")
  @@index([userId], map: "IDX_9556368d270d73579a68db7e1b")
  @@index([answerId], map: "IDX_c27a91d761c26ad612a0a35697")
  @@map("answer_favorited_by_user")
}

model AnswerQueryLog {
  id        Int      @id(map: "PK_4f65c4804d0693f458a716aa72c") @default(autoincrement())
  viewerId  Int?     @map("viewer_id")
  answerId  Int      @map("answer_id")
  ip        String   @db.VarChar
  userAgent String   @map("user_agent") @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_71ed57d6bb340716f5e17043bbb")
  user      User?    @relation(fields: [viewerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_f4b7cd859700f8928695b6c2bab")

  @@index([answerId], map: "IDX_71ed57d6bb340716f5e17043bb")
  @@index([viewerId], map: "IDX_f4b7cd859700f8928695b6c2ba")
  @@map("answer_query_log")
}

model AnswerUpdateLog {
  id         Int      @id(map: "PK_5ae381609b7ae9f2319fe26031f") @default(autoincrement())
  updaterId  Int?     @map("updater_id")
  answerId   Int      @map("answer_id")
  oldContent String   @map("old_content")
  newContent String   @map("new_content")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user       User?    @relation(fields: [updaterId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_0ef2a982b61980d95b5ae7f1a60")
  answer     Answer   @relation(fields: [answerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_6f0964cf74c12678a86e49b23fe")

  @@index([updaterId], map: "IDX_0ef2a982b61980d95b5ae7f1a6")
  @@index([answerId], map: "IDX_6f0964cf74c12678a86e49b23f")
  @@map("answer_update_log")
}

model AnswerUserAttitude {
  id       Int    @id(map: "PK_c06b4ffc5a74d07cb867d6b3f98") @default(autoincrement())
  userId   Int    @map("user_id")
  answerId Int    @map("answer_id")
  type     Int    @default(0)
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_2de5146dd65213f724e32745d06")
  user     User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_7555fb52fdf623d67f9884ea63d")

  @@map("answer_user_attitude")
}

//
// attitude.prisma
//

//
//  Description: This file defines the database stucture of attitude.
//
//  Author(s):
//      Nictheboy Li    <nictheboy@outlook.com>
//
//

enum AttitudableType {
  COMMENT
  QUESTION
  ANSWER
}

enum AttitudeType {
  UNDEFINED
  POSITIVE
  NEGATIVE
}

// Although UNDEFINED is supported,
// it should not be stored in database.
enum AttitudeTypeNotUndefined {
  POSITIVE
  NEGATIVE
}

model Attitude {
  id              Int                      @id @default(autoincrement())
  user            User                     @relation(fields: [userId], references: [id])
  userId          Int                      @map("user_id")
  attitudableType AttitudableType          @map("attitudable_type")
  attitudableId   Int                      @map("attitudable_id")
  attitude        AttitudeTypeNotUndefined
  createdAt       DateTime                 @default(now()) @map("created_at")
  updatedAt       DateTime                 @updatedAt() @map("updated_at")

  @@unique([attitudableId, userId, attitudableType])
  @@index([userId])
  @@map("attitude")
}

model AttitudeLog {
  id              Int             @id @default(autoincrement())
  user            User            @relation(fields: [userId], references: [id])
  userId          Int             @map("user_id")
  attitudableType AttitudableType @map("attitudable_type")
  attitudableId   Int             @map("attitudable_id")
  attitude        AttitudeType
  createdAt       DateTime        @default(now()) @map("created_at")

  @@index([attitudableId, attitudableType])
  @@index([userId])
  @@map("attitude_log")
}

//
// session.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

model Session {
  id              Int      @id(map: "PK_f55da76ac1c3ac420f444d2ff11") @default(autoincrement())
  validUntil      DateTime @map("valid_until") @db.Timestamptz(6)
  revoked         Boolean
  userId          Int      @map("user_id")
  authorization   String
  lastRefreshedAt BigInt   @map("last_refreshed_at")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([userId], map: "IDX_3d2f174ef04fb312fdebd0ddc5")
  @@index([validUntil], map: "IDX_bb46e87d5b3f1e55c625755c00")
  @@map("session")
}

model SessionRefreshLog {
  id              Int      @id(map: "PK_f8f46c039b0955a7df6ad6631d7") @default(autoincrement())
  sessionId       Int      @map("session_id")
  oldRefreshToken String   @map("old_refresh_token")
  newRefreshToken String   @map("new_refresh_token")
  accessToken     String   @map("access_token")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("session_refresh_log")
}

//
// avatars.legacy.prisma
//

model Avatar {
  id           Int            @id @default(autoincrement())
  url          String         @db.VarChar
  name         String         @db.VarChar
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  avatarType   String         @map("avatar_type") @db.VarChar
  usageCount   Int            @default(0) @map("usage_count")
  groupProfile GroupProfile[]
  userProfile  UserProfile[]

  @@map("avatar")
}

//
// comment.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

enum CommentCommentabletypeEnum {
  ANSWER
  COMMENT
  QUESTION
}

model Comment {
  id               Int                        @id(map: "PK_0b0e4bbc8415ec426f87f3a88e2") @default(autoincrement())
  commentableType  CommentCommentabletypeEnum @map("commentable_type")
  commentableId    Int                        @map("commentable_id")
  content          String
  createdById      Int                        @map("created_by_id")
  createdAt        DateTime                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime                   @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt        DateTime?                  @map("deleted_at") @db.Timestamp(6)
  user             User                       @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_63ac916757350d28f05c5a6a4ba")
  commentDeleteLog CommentDeleteLog[]
  commentQueryLog  CommentQueryLog[]

  @@index([commentableId], map: "IDX_525212ea7a75cba69724e42303")
  @@index([createdById], map: "IDX_63ac916757350d28f05c5a6a4b")
  @@map("comment")
}

model CommentDeleteLog {
  id           Int      @id(map: "PK_429889b4bdc646cb80ef8bc1814") @default(autoincrement())
  commentId    Int      @map("comment_id")
  operatedById Int      @map("operated_by_id")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user         User     @relation(fields: [operatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_53f0a8befcc12c0f7f2bab7584d")
  comment      Comment  @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_66705ce7d7908554cff01b260ec")

  @@index([operatedById], map: "IDX_53f0a8befcc12c0f7f2bab7584")
  @@index([commentId], map: "IDX_66705ce7d7908554cff01b260e")
  @@map("comment_delete_log")
}

model CommentQueryLog {
  id        Int      @id(map: "PK_afbfb3d92cbf55c99cb6bdcd58f") @default(autoincrement())
  commentId Int      @map("comment_id")
  viewerId  Int?     @map("viewer_id")
  ip        String   @db.VarChar
  userAgent String   @map("user_agent") @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_4020ff7fcffb2737e990f8bde5e")
  user      User?    @relation(fields: [viewerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_4ead8566a6fa987264484b13d54")

  @@index([commentId], map: "IDX_4020ff7fcffb2737e990f8bde5")
  @@index([viewerId], map: "IDX_4ead8566a6fa987264484b13d5")
  @@map("comment_query_log")
}

//
// groups.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

model Group {
  id                        Int                         @id(map: "PK_256aa0fda9b1de1a73ee0b7106b") @default(autoincrement())
  name                      String                      @unique(map: "IDX_8a45300fd825918f3b40195fbd") @db.VarChar
  createdAt                 DateTime                    @default(dbgenerated("('now'::text)::timestamp(3) with time zone")) @map("created_at")
  updatedAt                 DateTime                    @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt                 DateTime?                   @map("deleted_at") @db.Timestamptz(6)
  answer                    Answer[]
  groupMembership           GroupMembership[]
  groupProfile              GroupProfile?
  groupQuestionRelationship GroupQuestionRelationship[]
  groupTarget               GroupTarget[]

  @@map("group")
}

model GroupMembership {
  id        Int       @id(map: "PK_b631623cf04fa74513b975e7059") @default(autoincrement())
  groupId   Int       @map("group_id")
  memberId  Int       @map("member_id")
  role      String    @db.VarChar
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  user      User      @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_7d88d00d8617a802b698c0cd609")
  group     Group     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_b1411f07fafcd5ad93c6ee16424")

  @@index([memberId], map: "IDX_7d88d00d8617a802b698c0cd60")
  @@index([groupId], map: "IDX_b1411f07fafcd5ad93c6ee1642")
  @@map("group_membership")
}

model GroupProfile {
  id        Int       @id(map: "PK_2a62b59d1bf8a3191c992e8daf4") @default(autoincrement())
  intro     String    @db.VarChar
  avatarId  Int?      @map("avatar_id")
  avatar    Avatar?   @relation(fields: [avatarId], references: [id])
  groupId   Int       @unique(map: "REL_7359ba99cc116d00cf74e048ed") @map("group_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  group     Group     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_7359ba99cc116d00cf74e048edd")

  @@map("group_profile")
}

model GroupQuestionRelationship {
  id         Int       @id(map: "PK_47ee7be0b0f0e51727012382922") @default(autoincrement())
  groupId    Int       @map("group_id")
  questionId Int       @unique(map: "REL_5b1232271bf29d99456fcf39e7") @map("question_id")
  createdAt  DateTime  @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  question   Question  @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_5b1232271bf29d99456fcf39e75")
  group      Group     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_b31bf3b3688ec41daaced89a0ab")

  @@index([groupId], map: "IDX_b31bf3b3688ec41daaced89a0a")
  @@map("group_question_relationship")
}

model GroupTarget {
  id                  Int       @id(map: "PK_f1671a42b347bd96ce6595f91ee") @default(autoincrement())
  groupId             Int       @map("group_id")
  name                String    @db.VarChar
  intro               String    @db.VarChar
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt           DateTime? @map("deleted_at") @db.Timestamptz(6)
  startedAt           DateTime  @map("started_at") @db.Date
  endedAt             DateTime  @map("ended_at") @db.Date
  attendanceFrequency String    @map("attendance_frequency") @db.VarChar
  group               Group     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_19d57f140124c5100e8e1ca3088")

  @@index([groupId], map: "IDX_19d57f140124c5100e8e1ca308")
  @@map("group_target")
}

//
// materials.prisma
//

enum MaterialType {
  image
  file
  audio
  video
}

model Material {
  id   Int          @id @default(autoincrement())
  type MaterialType
  url  String
  name String
  meta Json         @db.Json

  @@map("material")
}

//
// questions.es.prisma
//

model QuestionElasticsearchRelation {
  id              Int      @id @default(autoincrement())
  question        Question @relation(fields: [questionId], references: [id], map: "fk_question_elasticsearch_relation_question_id")
  questionId      Int      @unique @map("question_id")
  elasticsearchId String   @map("elasticsearch_id")

  @@index([questionId])
  @@index([elasticsearchId])
  @@map("question_elasticsearch_relation")
}

//
// questions.invitation.prisma
//

model QuestionInvitationRelation {
  id         Int      @id @default(autoincrement())
  questionId Int      @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([questionId])
  @@index([userId])
  @@map("question_invitation_relation")
}

//
// questions.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

model Question {
  id                            Int                            @id(map: "PK_21e5786aa0ea704ae185a79b2d5") @default(autoincrement())
  createdById                   Int                            @map("created_by_id")
  title                         String
  content                       String
  type                          Int
  groupId                       Int?                           @map("group_id")
  createdAt                     DateTime                       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                     DateTime                       @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt                     DateTime?                      @map("deleted_at") @db.Timestamptz(6)
  answer                        Answer[]
  groupQuestionRelationship     GroupQuestionRelationship?
  user                          User                           @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_187915d8eaa010cde8b053b35d5")
  bounty                        Int                            @default(0)
  bountyStartAt                 DateTime?                      @map("bounty_start_at") @db.Timestamptz(6)
  acceptedAnswer                Answer?                        @relation("AcceptedAnswer", fields: [acceptedAnswerId], references: [id])
  acceptedAnswerId              Int?                           @unique() @map("accepted_answer_id")
  questionFollowerRelation      QuestionFollowerRelation[]
  questionQueryLog              QuestionQueryLog[]
  questionTopicRelation         QuestionTopicRelation[]
  questionInvitationRelation    QuestionInvitationRelation[]
  questionElasticsearchRelation QuestionElasticsearchRelation?

  @@index([createdById], map: "IDX_187915d8eaa010cde8b053b35d")
  @@index([title, content], map: "IDX_8b24620899a8556c3f22f52145")
  @@index([groupId], map: "IDX_ac7c68d428ab7ffd2f4752eeaa")
  @@map("question")
}

model QuestionFollowerRelation {
  id         Int       @id(map: "PK_5f5ce2e314f975612a13d601362") @default(autoincrement())
  questionId Int       @map("question_id")
  followerId Int       @map("follower_id")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  user       User      @relation(fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_21a30245c4a32d5ac67da809010")
  question   Question  @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_6544f7f7579bf88e3c62f995f8a")

  @@index([followerId], map: "IDX_21a30245c4a32d5ac67da80901")
  @@index([questionId], map: "IDX_6544f7f7579bf88e3c62f995f8")
  @@map("question_follower_relation")
}

model QuestionQueryLog {
  id         Int      @id(map: "PK_2876061262a774e4aba4daaaae4") @default(autoincrement())
  viewerId   Int?     @map("viewer_id")
  questionId Int      @map("question_id")
  ip         String   @db.VarChar
  userAgent  String   @map("user_agent") @db.VarChar
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user       User?    @relation(fields: [viewerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_8ce4bcc67caf0406e6f20923d4d")
  question   Question @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_a0ee1672e103ed0a0266f217a3f")

  @@index([viewerId], map: "IDX_8ce4bcc67caf0406e6f20923d4")
  @@index([questionId], map: "IDX_a0ee1672e103ed0a0266f217a3")
  @@map("question_query_log")
}

model QuestionSearchLog {
  id              Int      @id(map: "PK_6f41b41474cf92c67a7da97384c") @default(autoincrement())
  keywords        String   @db.VarChar
  firstQuestionId Int?     @map("first_question_id")
  pageSize        Int      @map("page_size")
  result          String   @db.VarChar
  duration        Float
  searcherId      Int?     @map("searcher_id")
  ip              String   @db.VarChar
  userAgent       String   @map("user_agent") @db.VarChar
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user            User?    @relation(fields: [searcherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_13c7e9fd7403cc5a87ab6524bc4")

  @@index([searcherId], map: "IDX_13c7e9fd7403cc5a87ab6524bc")
  @@index([keywords], map: "IDX_2fbe3aa9f62233381aefeafa00")
  @@map("question_search_log")
}

model QuestionTopicRelation {
  id          Int       @id(map: "PK_c50ec8a9ac6c3007f0861e4a383") @default(autoincrement())
  questionId  Int       @map("question_id")
  topicId     Int       @map("topic_id")
  createdById Int       @map("created_by_id")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)
  user        User      @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_d439ea68a02c1e7ea9863fc3df1")
  topic       Topic     @relation(fields: [topicId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_dd4b9a1b83559fa38a3a50463fd")
  question    Question  @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_fab99c5e4fc380d9b7f9abbbb02")

  @@index([topicId], map: "IDX_dd4b9a1b83559fa38a3a50463f")
  @@index([questionId], map: "IDX_fab99c5e4fc380d9b7f9abbbb0")
  @@map("question_topic_relation")
}

//
// topics.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

model Topic {
  id                    Int                     @id(map: "PK_33aa4ecb4e4f20aa0157ea7ef61") @default(autoincrement())
  name                  String                  @unique(map: "idx_topic_name_unique") @db.VarChar
  createdById           Int                     @map("created_by_id")
  createdAt             DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt             DateTime?               @map("deleted_at") @db.Timestamptz(6)
  questionTopicRelation QuestionTopicRelation[]
  user                  User                    @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_59d7548ea797208240417106e2d")

  @@index([createdById], map: "IDX_59d7548ea797208240417106e2")
  @@index([name], map: "idx_topic_name_ft")
  @@map("topic")
}

model TopicSearchLog {
  id           Int      @id(map: "PK_41a432f5f993017b2502c73c78e") @default(autoincrement())
  keywords     String   @db.VarChar
  firstTopicId Int?     @map("first_topic_id")
  pageSize     Int      @map("page_size")
  result       String   @db.VarChar
  duration     Float
  searcherId   Int?     @map("searcher_id")
  ip           String   @db.VarChar
  userAgent    String   @map("user_agent") @db.VarChar
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user         User?    @relation(fields: [searcherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_fe1e75b8b625499f0119faaba5b")

  @@index([keywords], map: "IDX_85c1844b4fa3e29b1b8dfaeac6")
  @@index([searcherId], map: "IDX_fe1e75b8b625499f0119faaba5")
  @@map("topic_search_log")
}

//
// users.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

model User {
  id                                                                 Int                          @id(map: "PK_cace4a159ff9f2512dd42373760") @default(autoincrement())
  username                                                           String                       @unique(map: "IDX_78a916df40e02a9deb1c4b75ed") @db.VarChar
  hashedPassword                                                     String                       @map("hashed_password") @db.VarChar
  email                                                              String                       @unique(map: "IDX_e12875dfb3b1d92d7d7c5377e2") @db.VarChar
  createdAt                                                          DateTime                     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                                          DateTime                     @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt                                                          DateTime?                    @map("deleted_at") @db.Timestamptz(6)
  answer                                                             Answer[]
  answerDeleteLog                                                    AnswerDeleteLog[]
  answerFavoritedByUser                                              AnswerFavoritedByUser[]
  answerQueryLog                                                     AnswerQueryLog[]
  answerUpdateLog                                                    AnswerUpdateLog[]
  answerUserAttitude                                                 AnswerUserAttitude[]
  comment                                                            Comment[]
  commentDeleteLog                                                   CommentDeleteLog[]
  commentQueryLog                                                    CommentQueryLog[]
  groupMembership                                                    GroupMembership[]
  question                                                           Question[]
  questionFollowerRelation                                           QuestionFollowerRelation[]
  questionQueryLog                                                   QuestionQueryLog[]
  questionSearchLog                                                  QuestionSearchLog[]
  questionTopicRelation                                              QuestionTopicRelation[]
  topic                                                              Topic[]
  topicSearchLog                                                     TopicSearchLog[]
  userFollowingRelationshipUserFollowingRelationshipFollowerIdTouser UserFollowingRelationship[]  @relation("user_following_relationship_followerIdTouser")
  userFollowingRelationshipUserFollowingRelationshipFolloweeIdTouser UserFollowingRelationship[]  @relation("user_following_relationship_followeeIdTouser")
  userLoginLog                                                       UserLoginLog[]
  userProfile                                                        UserProfile?
  userProfileQueryLogUserProfileQueryLogViewerIdTouser               UserProfileQueryLog[]        @relation("user_profile_query_log_viewerIdTouser")
  userProfileQueryLogUserProfileQueryLogVieweeIdTouser               UserProfileQueryLog[]        @relation("user_profile_query_log_vieweeIdTouser")
  attitude                                                           Attitude[]
  attitudeLog                                                        AttitudeLog[]
  questionInvitationRelation                                         QuestionInvitationRelation[]

  @@map("user")
}

model UserFollowingRelationship {
  id                                            Int       @id(map: "PK_3b0199015f8814633fc710ff09d") @default(autoincrement())
  followeeId                                    Int       @map("followee_id")
  followerId                                    Int       @map("follower_id")
  createdAt                                     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt                                     DateTime? @map("deleted_at") @db.Timestamptz(6)
  userUserFollowingRelationshipFollowerIdTouser User      @relation("user_following_relationship_followerIdTouser", fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_868df0c2c3a138ee54d2a515bce")
  userUserFollowingRelationshipFolloweeIdTouser User      @relation("user_following_relationship_followeeIdTouser", fields: [followeeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_c78831eeee179237b1482d0c6fb")

  @@index([followerId], map: "IDX_868df0c2c3a138ee54d2a515bc")
  @@index([followeeId], map: "IDX_c78831eeee179237b1482d0c6f")
  @@map("user_following_relationship")
}

model UserLoginLog {
  id        Int      @id(map: "PK_f8db79b1af1f385db4f45a2222e") @default(autoincrement())
  userId    Int      @map("user_id")
  ip        String   @db.VarChar
  userAgent String   @map("user_agent") @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_66c592c7f7f20d1214aba2d0046")

  @@index([userId], map: "IDX_66c592c7f7f20d1214aba2d004")
  @@map("user_login_log")
}

model UserProfile {
  id        Int       @id(map: "PK_f44d0cd18cfd80b0fed7806c3b7") @default(autoincrement())
  userId    Int       @unique(map: "IDX_51cb79b5555effaf7d69ba1cff") @map("user_id")
  nickname  String    @db.VarChar
  avatarId  Int       @map("avatar_id")
  intro     String    @db.VarChar
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_profile_user_id")
  avatar    Avatar    @relation(fields: [avatarId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_profile_avatar_id")

  @@map("user_profile")
}

model UserProfileQueryLog {
  id                                    Int      @id(map: "PK_9aeff7c959703fad866e9ad581a") @default(autoincrement())
  viewerId                              Int?     @map("viewer_id")
  vieweeId                              Int      @map("viewee_id")
  ip                                    String   @db.VarChar
  userAgent                             String   @map("user_agent") @db.VarChar
  createdAt                             DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  userUserProfileQueryLogViewerIdTouser User?    @relation("user_profile_query_log_viewerIdTouser", fields: [viewerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_1261db28434fde159acda6094bc")
  userUserProfileQueryLogVieweeIdTouser User     @relation("user_profile_query_log_vieweeIdTouser", fields: [vieweeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ff592e4403b328be0de4f2b3973")

  @@index([viewerId], map: "IDX_1261db28434fde159acda6094b")
  @@index([vieweeId], map: "IDX_ff592e4403b328be0de4f2b397")
  @@map("user_profile_query_log")
}

model UserRegisterLog {
  id                Int      @id(map: "PK_3596a6f74bd2a80be930f6d1e39") @default(autoincrement())
  email             String   @db.VarChar
  type              Int
  registerRequestId Int?     @map("register_request_id")
  ip                String   @db.VarChar
  userAgent         String   @map("user_agent") @db.VarChar
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([email], map: "IDX_3af79f07534d9f1c945cd4c702")
  @@map("user_register_log")
}

model UserRegisterRequest {
  id        Int      @id(map: "PK_cdf2d880551e43d9362ddd37ae0") @default(autoincrement())
  email     String   @db.VarChar
  code      String   @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([email], map: "IDX_c1d0ecc369d7a6a3d7e876c589")
  @@map("user_register_request")
}

model UserResetPasswordLog {
  id        Int      @id(map: "PK_3ee4f25e7f4f1d5a9bd9817b62b") @default(autoincrement())
  userId    Int?     @map("user_id")
  type      Int
  ip        String   @db.VarChar
  userAgent String   @map("user_agent") @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("user_reset_password_log")
}
