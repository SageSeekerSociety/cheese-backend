//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// app.prisma
//

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

//
// answer.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

model answer {
  id                       Int                        @id(map: "PK_9232db17b63fb1e94f97e5c224f") @default(autoincrement())
  createdById              Int
  questionId               Int
  groupId                  Int?
  content                  String
  createdAt                DateTime                   @default(now()) @db.Timestamp(6)
  updatedAt                DateTime                   @default(now()) @db.Timestamp(6)
  deletedAt                DateTime?                  @db.Timestamp(6)
  group                    group?                     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_1887685ce6667b435b01c646a2c")
  question                 question                   @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_a4013f10cd6924793fbd5f0d637")
  user                     user                       @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_f636f6e852686173ea947f29045")
  answer_delete_log        answer_delete_log[]
  answer_favorited_by_user answer_favorited_by_user[]
  answer_query_log         answer_query_log[]
  answer_update_log        answer_update_log[]
  answer_user_attitude     answer_user_attitude[]

  @@index([groupId], map: "IDX_1887685ce6667b435b01c646a2")
  @@index([questionId], map: "IDX_a4013f10cd6924793fbd5f0d63")
  @@index([createdById], map: "IDX_f636f6e852686173ea947f2904")
}

model answer_delete_log {
  id        Int      @id(map: "PK_f1696d27f69ec9c6133a12aadcf") @default(autoincrement())
  deleterId Int?
  answerId  Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  answer    answer   @relation(fields: [answerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_910393b814aac627593588c17fd")
  user      user?    @relation(fields: [deleterId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_c2d0251df4669e17a57d6dbc06f")

  @@index([answerId], map: "IDX_910393b814aac627593588c17f")
  @@index([deleterId], map: "IDX_c2d0251df4669e17a57d6dbc06")
}

model answer_favorited_by_user {
  answerId Int
  userId   Int
  user     user   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_9556368d270d73579a68db7e1bf")
  answer   answer @relation(fields: [answerId], references: [id], onDelete: Cascade, map: "FK_c27a91d761c26ad612a0a356971")

  @@id([answerId, userId], map: "PK_5a857fe93c44fdb538ec5aa4771")
  @@index([userId], map: "IDX_9556368d270d73579a68db7e1b")
  @@index([answerId], map: "IDX_c27a91d761c26ad612a0a35697")
}

model answer_query_log {
  id        Int      @id(map: "PK_4f65c4804d0693f458a716aa72c") @default(autoincrement())
  viewerId  Int?
  answerId  Int
  ip        String   @db.VarChar
  userAgent String   @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamp(6)
  answer    answer   @relation(fields: [answerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_71ed57d6bb340716f5e17043bbb")
  user      user?    @relation(fields: [viewerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_f4b7cd859700f8928695b6c2bab")

  @@index([answerId], map: "IDX_71ed57d6bb340716f5e17043bb")
  @@index([viewerId], map: "IDX_f4b7cd859700f8928695b6c2ba")
}

model answer_update_log {
  id         Int      @id(map: "PK_5ae381609b7ae9f2319fe26031f") @default(autoincrement())
  updaterId  Int?
  answerId   Int
  oldContent String
  newContent String
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [updaterId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_0ef2a982b61980d95b5ae7f1a60")
  answer     answer   @relation(fields: [answerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_6f0964cf74c12678a86e49b23fe")

  @@index([updaterId], map: "IDX_0ef2a982b61980d95b5ae7f1a6")
  @@index([answerId], map: "IDX_6f0964cf74c12678a86e49b23f")
}

model answer_user_attitude {
  id       Int    @id(map: "PK_c06b4ffc5a74d07cb867d6b3f98") @default(autoincrement())
  userId   Int
  answerId Int
  type     Int    @default(0)
  answer   answer @relation(fields: [answerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_2de5146dd65213f724e32745d06")
  user     user   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_7555fb52fdf623d67f9884ea63d")
}

//
// attitude.prisma
//

//
//  Description: This file defines the database stucture of attitude.
//
//  Author(s):
//      Nictheboy Li    <nictheboy@outlook.com>
//
//

enum AttitudableType {
  COMMENT
  QUESTION
  ANSWER

  @@map("attitudable_type")
}

enum AttitudeType {
  UNDEFINED
  POSITIVE
  NEGATIVE

  @@map("attitude_type")
}

// Although UNDEFINED is supported,
// it should not be stored in database.
enum AttitudeTypeNotUndefined {
  POSITIVE
  NEGATIVE

  @@map("attitude_type_not_undefined")
}

model Attitude {
  id              Int                      @id @default(autoincrement())
  user            user                     @relation(fields: [userId], references: [id])
  userId          Int
  attitudableType AttitudableType
  attitudableId   Int
  attitude        AttitudeTypeNotUndefined
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt()

  @@unique([attitudableId, userId, attitudableType])
  @@index([userId])
  @@map("attitude")
}

model AttitudeLog {
  id              Int             @id @default(autoincrement())
  user            user            @relation(fields: [userId], references: [id])
  userId          Int
  attitudableType AttitudableType
  attitudableId   Int
  attitude        AttitudeType
  createdAt       DateTime        @default(now())

  @@index([attitudableId, attitudableType])
  @@index([userId])
  @@map("attitude_log")
}

//
// session.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

model session {
  id              Int      @id(map: "PK_f55da76ac1c3ac420f444d2ff11") @default(autoincrement())
  validUntil      DateTime @db.Timestamp(6)
  revoked         Boolean
  userId          Int
  authorization   String
  lastRefreshedAt BigInt
  createdAt       DateTime @default(now()) @db.Timestamp(6)

  @@index([userId], map: "IDX_3d2f174ef04fb312fdebd0ddc5")
  @@index([validUntil], map: "IDX_bb46e87d5b3f1e55c625755c00")
}

model session_refresh_log {
  id              Int      @id(map: "PK_f8f46c039b0955a7df6ad6631d7") @default(autoincrement())
  sessionId       Int
  oldRefreshToken String
  newRefreshToken String
  accessToken     String
  createdAt       DateTime @default(now()) @db.Timestamp(6)
}

//
// avatars.legacy.prisma
//

model avatar {
  id            Int             @id @default(autoincrement())
  url           String          @db.VarChar
  name          String          @db.VarChar
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  avatarType    String          @db.VarChar
  usageCount    Int             @default(0)
  group_profile group_profile[]
  user_profile  user_profile[]
}

//
// comment.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

enum comment_commentabletype_enum {
  ANSWER
  COMMENT
  QUESTION
}

model comment {
  id                 Int                          @id(map: "PK_0b0e4bbc8415ec426f87f3a88e2") @default(autoincrement())
  commentableType    comment_commentabletype_enum
  commentableId      Int
  content            String
  createdById        Int
  createdAt          DateTime                     @default(now()) @db.Timestamp(6)
  updatedAt          DateTime                     @default(now()) @db.Timestamp(6)
  deletedAt          DateTime?                    @db.Timestamp(6)
  user               user                         @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_63ac916757350d28f05c5a6a4ba")
  comment_delete_log comment_delete_log[]
  comment_query_log  comment_query_log[]

  @@index([commentableId], map: "IDX_525212ea7a75cba69724e42303")
  @@index([createdById], map: "IDX_63ac916757350d28f05c5a6a4b")
}

model comment_delete_log {
  id           Int      @id(map: "PK_429889b4bdc646cb80ef8bc1814") @default(autoincrement())
  commentId    Int
  operatedById Int
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [operatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_53f0a8befcc12c0f7f2bab7584d")
  comment      comment  @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_66705ce7d7908554cff01b260ec")

  @@index([operatedById], map: "IDX_53f0a8befcc12c0f7f2bab7584")
  @@index([commentId], map: "IDX_66705ce7d7908554cff01b260e")
}

model comment_query_log {
  id        Int      @id(map: "PK_afbfb3d92cbf55c99cb6bdcd58f") @default(autoincrement())
  commentId Int
  viewerId  Int?
  ip        String   @db.VarChar
  userAgent String   @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamp(6)
  comment   comment  @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_4020ff7fcffb2737e990f8bde5e")
  user      user?    @relation(fields: [viewerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_4ead8566a6fa987264484b13d54")

  @@index([commentId], map: "IDX_4020ff7fcffb2737e990f8bde5")
  @@index([viewerId], map: "IDX_4ead8566a6fa987264484b13d5")
}

//
// groups.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

model group {
  id                          Int                           @id(map: "PK_256aa0fda9b1de1a73ee0b7106b") @default(autoincrement())
  name                        String                        @unique(map: "IDX_8a45300fd825918f3b40195fbd") @db.VarChar
  createdAt                   DateTime                      @default(dbgenerated("('now'::text)::timestamp(3) with time zone"))
  updatedAt                   DateTime                      @default(now()) @db.Timestamp(6)
  deletedAt                   DateTime?                     @db.Timestamp(6)
  answer                      answer[]
  group_membership            group_membership[]
  group_profile               group_profile?
  group_question_relationship group_question_relationship[]
  group_target                group_target[]
}

model group_membership {
  id        Int       @id(map: "PK_b631623cf04fa74513b975e7059") @default(autoincrement())
  groupId   Int
  memberId  Int
  role      String    @db.VarChar
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  user      user      @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_7d88d00d8617a802b698c0cd609")
  group     group     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_b1411f07fafcd5ad93c6ee16424")

  @@index([memberId], map: "IDX_7d88d00d8617a802b698c0cd60")
  @@index([groupId], map: "IDX_b1411f07fafcd5ad93c6ee1642")
}

model group_profile {
  id        Int       @id(map: "PK_2a62b59d1bf8a3191c992e8daf4") @default(autoincrement())
  intro     String    @db.VarChar
  avatarId  Int?
  avatar    avatar?   @relation(fields: [avatarId], references: [id])
  groupId   Int       @unique(map: "REL_7359ba99cc116d00cf74e048ed")
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  group     group     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_7359ba99cc116d00cf74e048edd")
}

model group_question_relationship {
  id         Int       @id(map: "PK_47ee7be0b0f0e51727012382922") @default(autoincrement())
  groupId    Int
  questionId Int       @unique(map: "REL_5b1232271bf29d99456fcf39e7")
  createdAt  DateTime  @db.Timestamp(6)
  updatedAt  DateTime  @default(now()) @db.Timestamp(6)
  deletedAt  DateTime? @db.Timestamp(6)
  question   question  @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_5b1232271bf29d99456fcf39e75")
  group      group     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_b31bf3b3688ec41daaced89a0ab")

  @@index([groupId], map: "IDX_b31bf3b3688ec41daaced89a0a")
}

model group_target {
  id                  Int       @id(map: "PK_f1671a42b347bd96ce6595f91ee") @default(autoincrement())
  groupId             Int
  name                String    @db.VarChar
  intro               String    @db.VarChar
  createdAt           DateTime  @default(now()) @db.Timestamp(6)
  updatedAt           DateTime  @default(now()) @db.Timestamp(6)
  deletedAt           DateTime? @db.Timestamp(6)
  startedAt           DateTime  @db.Date
  endedAt             DateTime  @db.Date
  attendanceFrequency String    @db.VarChar
  group               group     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_19d57f140124c5100e8e1ca3088")

  @@index([groupId], map: "IDX_19d57f140124c5100e8e1ca308")
}

//
// questions.es.prisma
//

model QuestionElasticsearchRelation {
  id              Int      @id @default(autoincrement())
  question        question @relation(fields: [questionId], references: [id], map: "fk_question_elasticsearch_relation_question_id")
  questionId      Int      @unique
  elasticsearchId String

  @@map("question_elasticsearch_relation")
}

//
// questions.invitation.prisma
//

model QuestionInvitationRelation {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   question @relation(fields: [questionId], references: [id])
  userId     Int
  user       user     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([questionId])
  @@index([userId])
  @@map("question_invitation_relation")
}

//
// questions.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

model question {
  id                            Int                            @id(map: "PK_21e5786aa0ea704ae185a79b2d5") @default(autoincrement())
  createdById                   Int
  title                         String
  content                       String
  type                          Int
  groupId                       Int?
  createdAt                     DateTime                       @default(now()) @db.Timestamp(6)
  updatedAt                     DateTime                       @default(now()) @db.Timestamp(6)
  deletedAt                     DateTime?                      @db.Timestamp(6)
  answer                        answer[]
  group_question_relationship   group_question_relationship?
  user                          user                           @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_187915d8eaa010cde8b053b35d5")
  question_follower_relation    question_follower_relation[]
  question_query_log            question_query_log[]
  question_topic_relation       question_topic_relation[]
  QuestionElasticsearchRelation QuestionElasticsearchRelation?
  questionInvitationRelation    QuestionInvitationRelation[]

  @@index([createdById], map: "IDX_187915d8eaa010cde8b053b35d")
  @@index([title, content], map: "IDX_8b24620899a8556c3f22f52145")
  @@index([groupId], map: "IDX_ac7c68d428ab7ffd2f4752eeaa")
}

model question_follower_relation {
  id         Int       @id(map: "PK_5f5ce2e314f975612a13d601362") @default(autoincrement())
  questionId Int
  followerId Int
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  deletedAt  DateTime? @db.Timestamp(6)
  user       user      @relation(fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_21a30245c4a32d5ac67da809010")
  question   question  @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_6544f7f7579bf88e3c62f995f8a")

  @@index([followerId], map: "IDX_21a30245c4a32d5ac67da80901")
  @@index([questionId], map: "IDX_6544f7f7579bf88e3c62f995f8")
}

model question_query_log {
  id         Int      @id(map: "PK_2876061262a774e4aba4daaaae4") @default(autoincrement())
  viewerId   Int?
  questionId Int
  ip         String   @db.VarChar
  userAgent  String   @db.VarChar
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [viewerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_8ce4bcc67caf0406e6f20923d4d")
  question   question @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_a0ee1672e103ed0a0266f217a3f")

  @@index([viewerId], map: "IDX_8ce4bcc67caf0406e6f20923d4")
  @@index([questionId], map: "IDX_a0ee1672e103ed0a0266f217a3")
}

model question_search_log {
  id              Int      @id(map: "PK_6f41b41474cf92c67a7da97384c") @default(autoincrement())
  keywords        String   @db.VarChar
  firstQuestionId Int?
  pageSize        Int
  result          String   @db.VarChar
  duration        Float
  searcherId      Int?
  ip              String   @db.VarChar
  userAgent       String   @db.VarChar
  createdAt       DateTime @default(now()) @db.Timestamp(6)
  user            user?    @relation(fields: [searcherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_13c7e9fd7403cc5a87ab6524bc4")

  @@index([searcherId], map: "IDX_13c7e9fd7403cc5a87ab6524bc")
  @@index([keywords], map: "IDX_2fbe3aa9f62233381aefeafa00")
}

model question_topic_relation {
  id          Int       @id(map: "PK_c50ec8a9ac6c3007f0861e4a383") @default(autoincrement())
  questionId  Int
  topicId     Int
  createdById Int
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)
  user        user      @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_d439ea68a02c1e7ea9863fc3df1")
  topic       topic     @relation(fields: [topicId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_dd4b9a1b83559fa38a3a50463fd")
  question    question  @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_fab99c5e4fc380d9b7f9abbbb02")

  @@index([topicId], map: "IDX_dd4b9a1b83559fa38a3a50463f")
  @@index([questionId], map: "IDX_fab99c5e4fc380d9b7f9abbbb0")
}

//
// topics.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

model topic {
  id                      Int                       @id(map: "PK_33aa4ecb4e4f20aa0157ea7ef61") @default(autoincrement())
  name                    String                    @unique(map: "idx_topic_name_unique") @db.VarChar
  createdById             Int
  createdAt               DateTime                  @default(now()) @db.Timestamp(6)
  deletedAt               DateTime?                 @db.Timestamp(6)
  question_topic_relation question_topic_relation[]
  user                    user                      @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_59d7548ea797208240417106e2d")

  @@index([createdById], map: "IDX_59d7548ea797208240417106e2")
  @@index([name], map: "idx_topic_name_ft")
}

model topic_search_log {
  id           Int      @id(map: "PK_41a432f5f993017b2502c73c78e") @default(autoincrement())
  keywords     String   @db.VarChar
  firstTopicId Int?
  pageSize     Int
  result       String   @db.VarChar
  duration     Float
  searcherId   Int?
  ip           String   @db.VarChar
  userAgent    String   @db.VarChar
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  user         user?    @relation(fields: [searcherId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_fe1e75b8b625499f0119faaba5b")

  @@index([keywords], map: "IDX_85c1844b4fa3e29b1b8dfaeac6")
  @@index([searcherId], map: "IDX_fe1e75b8b625499f0119faaba5")
}

//
// users.legacy.prisma
//

//
//  DO NOT MODIFY THIS FILE!
//
//  TypeORM is deprecated in this project, and we use Prisma instead.
//  This file is only used to access legacy tables.
//
//  This file is generated by Prisma from the schema in a .legacy.entity.ts file,
//  If you modify this file, the schema in .legacy.prisma will be inconsistent
//  with this file. This may cause unexpected errors.
//  
//  2024-02-19 by Nictheboy <nictheboy@outlook.com>
//

model user {
  id                                                                       Int                           @id(map: "PK_cace4a159ff9f2512dd42373760") @default(autoincrement())
  username                                                                 String                        @unique(map: "IDX_78a916df40e02a9deb1c4b75ed") @db.VarChar
  hashedPassword                                                           String                        @db.VarChar
  email                                                                    String                        @unique(map: "IDX_e12875dfb3b1d92d7d7c5377e2") @db.VarChar
  createdAt                                                                DateTime                      @default(now()) @db.Timestamp(6)
  updatedAt                                                                DateTime                      @default(now()) @db.Timestamp(6)
  deletedAt                                                                DateTime?                     @db.Timestamp(6)
  answer                                                                   answer[]
  answer_delete_log                                                        answer_delete_log[]
  answer_favorited_by_user                                                 answer_favorited_by_user[]
  answer_query_log                                                         answer_query_log[]
  answer_update_log                                                        answer_update_log[]
  answer_user_attitude                                                     answer_user_attitude[]
  comment                                                                  comment[]
  comment_delete_log                                                       comment_delete_log[]
  comment_query_log                                                        comment_query_log[]
  group_membership                                                         group_membership[]
  question                                                                 question[]
  question_follower_relation                                               question_follower_relation[]
  question_query_log                                                       question_query_log[]
  question_search_log                                                      question_search_log[]
  question_topic_relation                                                  question_topic_relation[]
  topic                                                                    topic[]
  topic_search_log                                                         topic_search_log[]
  user_following_relationship_user_following_relationship_followerIdTouser user_following_relationship[] @relation("user_following_relationship_followerIdTouser")
  user_following_relationship_user_following_relationship_followeeIdTouser user_following_relationship[] @relation("user_following_relationship_followeeIdTouser")
  user_login_log                                                           user_login_log[]
  user_profile                                                             user_profile?
  user_profile_query_log_user_profile_query_log_viewerIdTouser             user_profile_query_log[]      @relation("user_profile_query_log_viewerIdTouser")
  user_profile_query_log_user_profile_query_log_vieweeIdTouser             user_profile_query_log[]      @relation("user_profile_query_log_vieweeIdTouser")
  Attitude                                                                 Attitude[]
  AttitudeLog                                                              AttitudeLog[]
  QuestionInvitationRelation                                               QuestionInvitationRelation[]
}

model user_following_relationship {
  id                                                Int       @id(map: "PK_3b0199015f8814633fc710ff09d") @default(autoincrement())
  followeeId                                        Int
  followerId                                        Int
  createdAt                                         DateTime  @default(now()) @db.Timestamp(6)
  deletedAt                                         DateTime? @db.Timestamp(6)
  user_user_following_relationship_followerIdTouser user      @relation("user_following_relationship_followerIdTouser", fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_868df0c2c3a138ee54d2a515bce")
  user_user_following_relationship_followeeIdTouser user      @relation("user_following_relationship_followeeIdTouser", fields: [followeeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_c78831eeee179237b1482d0c6fb")

  @@index([followerId], map: "IDX_868df0c2c3a138ee54d2a515bc")
  @@index([followeeId], map: "IDX_c78831eeee179237b1482d0c6f")
}

model user_login_log {
  id        Int      @id(map: "PK_f8db79b1af1f385db4f45a2222e") @default(autoincrement())
  userId    Int
  ip        String   @db.VarChar
  userAgent String   @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamp(6)
  user      user     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_66c592c7f7f20d1214aba2d0046")

  @@index([userId], map: "IDX_66c592c7f7f20d1214aba2d004")
}

model user_profile {
  id        Int       @id(map: "PK_f44d0cd18cfd80b0fed7806c3b7") @default(autoincrement())
  userId    Int       @unique(map: "IDX_51cb79b5555effaf7d69ba1cff")
  nickname  String    @db.VarChar
  avatarId  Int
  intro     String    @db.VarChar
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  user      user      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_profile_user_id")
  avatar    avatar    @relation(fields: [avatarId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_profile_avatar_id")
}

model user_profile_query_log {
  id                                         Int      @id(map: "PK_9aeff7c959703fad866e9ad581a") @default(autoincrement())
  viewerId                                   Int?
  vieweeId                                   Int
  ip                                         String   @db.VarChar
  userAgent                                  String   @db.VarChar
  createdAt                                  DateTime @default(now()) @db.Timestamp(6)
  user_user_profile_query_log_viewerIdTouser user?    @relation("user_profile_query_log_viewerIdTouser", fields: [viewerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_1261db28434fde159acda6094bc")
  user_user_profile_query_log_vieweeIdTouser user     @relation("user_profile_query_log_vieweeIdTouser", fields: [vieweeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ff592e4403b328be0de4f2b3973")

  @@index([viewerId], map: "IDX_1261db28434fde159acda6094b")
  @@index([vieweeId], map: "IDX_ff592e4403b328be0de4f2b397")
}

model user_register_log {
  id                Int      @id(map: "PK_3596a6f74bd2a80be930f6d1e39") @default(autoincrement())
  email             String   @db.VarChar
  type              Int
  registerRequestId Int?
  ip                String   @db.VarChar
  userAgent         String   @db.VarChar
  createdAt         DateTime @default(now()) @db.Timestamp(6)

  @@index([email], map: "IDX_3af79f07534d9f1c945cd4c702")
}

model user_register_request {
  id        Int      @id(map: "PK_cdf2d880551e43d9362ddd37ae0") @default(autoincrement())
  email     String   @db.VarChar
  code      String   @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamp(6)

  @@index([email], map: "IDX_c1d0ecc369d7a6a3d7e876c589")
}

model user_reset_password_log {
  id        Int      @id(map: "PK_3ee4f25e7f4f1d5a9bd9817b62b") @default(autoincrement())
  userId    Int?
  type      Int
  ip        String   @db.VarChar
  userAgent String   @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamp(6)
}
